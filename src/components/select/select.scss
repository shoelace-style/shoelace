@import 'component';
@import 'form-control-label';
@import 'form-control-help-text';
@import 'mixins/hide-scrollbar';

:host {
  display: block;
}

.select {
  width: 100%;
}

.select__input {
  flex: 1 1 auto;
  width: 100%;

  &:not([disabled])::part(base) {
    cursor: pointer;
  }

  // Hide the caret since we use a faux readonly technique to prevent user input
  &::part(input) {
    caret-color: transparent;
  }

  span[slot='prefix'] {
    margin-left: var(--sl-spacing-xx-small);

    sl-tag:not(:last-of-type) {
      margin-right: var(--sl-spacing-xx-small);
    }
  }
}

.select__icon {
  display: inline-flex;
}
.select__icon sl-icon {
  transition: var(--sl-transition-medium) transform ease;
}

.select--open .select__icon sl-icon {
  transform: rotate(-180deg);
}

// Force the input's clear button to show when the select isn't empty. This is important for the `multiple` option, as
// it doesn't use the input's `value` prop to display the selection.
.select:not(.select--empty) .select__input::part(clear-button) {
  visibility: visible;
}

// For multiselect, ensure tags don't wrap and can be scrolled when the control's width is smaller than its contents. We
// also need to make sure the clear button and the chevron icon always show.
.select--multiple {
  .select__input::part(input) {
    flex: 1 1 0;
  }

  .select__input::part(prefix) {
    @include hide-scrollbar;
    flex-shrink: 1;
    overflow-x: auto;
    white-space: nowrap;
  }

  .select__input::part(clear-button),
  .select__input::part(suffix) {
    padding-left: var(--sl-spacing-x-small);
  }

  &.select--has-tags .select__input::part(input) {
    margin: 0;
  }
}
